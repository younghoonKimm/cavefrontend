import Head from 'next/head';
import Image from 'next/image';

import { useSession, signOut } from 'next-auth/react';
import { useRouter } from 'next/router';

import { GetServerSideProps } from 'next';
import { getSessionData, getTokens } from '@/utils/getServerSide';

export default function Home() {
  const { data: session } = useSession();
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          {session ? (
            <>
              {session.user?.name}님 반갑습니다 <br />
              <button type="button" onClick={() => signOut()}>
                로그아웃
              </button>
            </>
          ) : (
            <>
              로그인되지 않았습니다 <br />
              <button onClick={() => router.push('/login')}>로그인</button>
            </>
          )}
          <p>
            Get started by editing&nbsp;
            <code>pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getSessionData(req, res);

  if (session) {
    const { cookies } = req;

    //login
    if (!cookies['CAV_ACC'] && !cookies['CAV_RFS']) {
      const cookies = await getTokens(session);
      if (cookies) {
        res.setHeader('set-cookie', [...cookies]);
      }
    }
  } else {
    res.setHeader('set-cookie', []);
  }
  return {
    props: { session },
  };
};
