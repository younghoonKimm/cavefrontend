import { getNewTokenAPI } from '@/api/auth/auth';
import axiosInstance from '@/api/axios';
import Layout from '@/components/templates/Layout/Layout';
import useAuth, { getMe } from '@/hooks/api/useAuth';
import useSocket from '@/hooks/useSocket';
import {
  setAxiosDefaultForServerSide,
  setAxiosDefaultHeaderCookie,
  withAuth,
} from '@/utils/getServerSide';
import { dehydrate, QueryClient } from '@tanstack/react-query';
import { QUERYKEY_USER } from 'constants/queryKeys';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';

import { useRouter } from 'next/router';
import React, { useCallback, useEffect, useState } from 'react';

const ConferenceDetail: NextPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const { user } = useAuth();
  const [mes, setMes] = useState<any>('');
  const [socket, disconnect] = useSocket(id as string);

  useEffect(() => {
    if (user && socket) {
      socket.emit('login', {
        id: user?.id,
        conferences: [id],
      });
    }
  }, [socket, user, id]);

  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  useEffect(() => {
    if (user && socket) {
      socket.on('messaged', (data) => {
        setMes(data);
      });

      return () => {
        socket.off('messaged', (data) => setMes(data));
      };
    }
  }, [socket, user]);

  const onSubmit = useCallback(() => {
    socket?.emit('message', mes);
  }, [socket, mes]);

  return (
    <>
      <Head>
        <title>Conference</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div>
          <button type="button" onClick={() => onSubmit()}>
            <span>button</span>
          </button>

          <textarea value={mes} onChange={(e) => setMes(e.target.value)} />
        </div>
      </Layout>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = withAuth(async () => {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery([QUERYKEY_USER], () => getMe(), {
    staleTime: 900,
  });

  return {
    props: { dehydratedState: dehydrate(queryClient) },
  };
});

export default ConferenceDetail;
