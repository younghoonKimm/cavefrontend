import { getNewTokenAPI } from '@/api/auth/auth';
import Layout from '@/components/templates/Layout/Layout';
import useAuth, { getMe } from '@/hooks/api/useAuth';
import useSocket from '@/hooks/useSocket';
import {
  setAxiosDefaultForServerSide,
  setAxiosDefaultHeaderCookie,
} from '@/utils/getServerSide';
import { dehydrate, QueryClient } from '@tanstack/react-query';
import { QUERYKEY_USER } from 'constants/queryKeys';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useCallback, useEffect, useState } from 'react';

const ConferenceDetail: NextPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const { user } = useAuth();
  // const [socket, disconnect] = useSocket(id as string);
  const [mes, setMes] = useState<any>('');

  const socket = 1;

  useEffect(() => {
    if (user && socket) {
      // socket.emit('login', {
      //   id: user?.id,
      //   conferences: [id],
      // });
    }
  }, [socket, user, id]);

  // useEffect(() => {
  //   return () => {
  //     disconnect();
  //   };
  // }, [disconnect]);

  useEffect(() => {
    // if (user && socket) {
    //   socket.on('messaged', (data) => {
    //     setMes(data);
    //   });
    //   return () => {
    //     socket.off('messaged', (data) => setMes(data));
    //   };
    // }
  }, [socket, user, mes]);

  const onSubmit = useCallback(() => {
    // socket?.emit('message', mes);
  }, [socket, mes]);

  return (
    <>
      <Head>
        <title>Conference</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div>
          <button type="button" onClick={() => onSubmit()}>
            <span>button</span>
          </button>

          <textarea value={mes} onChange={(e) => setMes(e.target.value)} />
        </div>
      </Layout>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({
  req,
  res,
  params,
}) => {
  const queryClient = new QueryClient();
  const { CAV_ACC } = req.cookies;
  const { cookie } = req.headers;

  const id = params?.id as string;

  if (cookie && CAV_ACC) {
    try {
      setAxiosDefaultForServerSide(cookie);
      const { headers, data: token } = await getNewTokenAPI();

      if (headers['set-cookie']) {
        res.setHeader('set-cookie', headers['set-cookie']);
        setAxiosDefaultHeaderCookie(
          `CAV_RFS=${token.refreshToken}; CAV_ACC=${token.accessToken}`,
        );
        console.log(token);
        await queryClient.prefetchQuery([QUERYKEY_USER], () => getMe(), {
          staleTime: 900,
        });
      }
    } catch (e) {
    } finally {
      setAxiosDefaultHeaderCookie('');
    }
  } else {
    return {
      props: { dehydratedState: dehydrate(queryClient) },
      redirect: {
        permanent: false,
        destination: '/login',
      },
    };
  }

  return {
    props: { dehydratedState: dehydrate(queryClient) },
  };
};

export default ConferenceDetail;
